---
layout: page
title: 
permalink: /search-and-find/
---

Below is documentation for Search and Find filters. 


<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Responsive columns */
        gap: 10px;
        padding: 10px;
    }
    .grid-item {
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        padding: 15px;
        text-align: center;
        border-radius: 5px;
        box-sizing: border-box; /* Ensures padding is included in width */
        font-size: 1rem; /* Adjusts font size for better readability */
    }
    .grid-item a {
        text-decoration: none;
        color: #333;
        font-weight: bold;
        display: block; /* Makes the link fill the grid item */
        width: 100%;
        height: 100%;
    }
    .grid-item a:hover {
        color: #007acc;
    }
    @media (max-width: 600px) {
        .grid-item {
            font-size: 0.875rem; /* Adjust font size for smaller screens */
        }
    }
</style>

<div class="grid-container">
    <div class="grid-item"><a href="#contains_text">contains_text</a></div>
    <div class="grid-item"><a href="#eye_detection">eye_detection</a></div>
    <div class="grid-item"><a href="#face_detection">face_detection</a></div>
    <div class="grid-item"><a href="#primary_color">primary_color</a></div>
    <div class="grid-item"><a href="#search_tags">search_tags</a></div>
</div>



<a id="contains_text"></a>

# Contains Text Filter

## Description
The **Contains Text** filter checks whether the filename of the current image contains specific text. This is useful for selectively processing images based on their filenames.

## Properties

### contains_text
- **Description**: A comma-separated list of text strings to search for in the filename.
- **Value Type**: String
- **Usage**: Enter text strings that the filter will search for in the image filenames.

---

[Back to Top](#)

---

<a id="eye_detection"></a>

# Eye Detection Filter

## Description
The **Eye Detection** filter detects eyes in an image and can optionally draw bounding boxes around them. This is useful for applications that require facial feature detection.

## Properties

### eye_detection_draw_bounding_boxes
- **Description**: Whether to draw bounding boxes around detected eyes.
- **Value Type**: `Boolean`
- **Usage**: Set to `True` to draw bounding boxes.

### eye_detection_bounding_box_color
- **Description**: The color of the bounding boxes.
- **Value Type**: `Tuple (R, G, B)`
- **Usage**: Set the color for the bounding boxes.

### eye_detection_bounding_box_thickness
- **Description**: The thickness of the bounding boxes.
- **Value Type**: `Integer`
- **Usage**: Increase to make the bounding boxes thicker.

### eye_detection_scale_factor
- **Description**: The scale factor for the eye detection algorithm.
- **Value Type**: `Float`
- **Usage**: Adjust to control how the algorithm scales the image.

### eye_detection_min_neighbors
- **Description**: The minimum number of neighbors each eye should have in order to be retained.
- **Value Type**: `Integer`
- **Usage**: Increase to reduce false positives.

### eye_detection_min_size
- **Description**: The minimum size of eyes to detect.
- **Value Type**: `Tuple (Width, Height)`
- **Usage**: Set the minimum size for detected eyes.

---

[Back to Top](#)

---

<a id="face_detection"></a>

# Face Detection Filter

## Description
The **Face Detection** filter detects faces in an image using MTCNN (Multi-task Cascaded Convolutional Networks) and can optionally draw bounding boxes around them.

## Properties

### face_detection_confidence_threshold
- **Description**: The confidence threshold for detecting faces.
- **Value Type**: `Float`
- **Usage**: Set the minimum confidence level for a face to be considered valid.

### face_detection_draw_bounding_boxes
- **Description**: Whether to draw bounding boxes around detected faces.
- **Value Type**: `Boolean`
- **Usage**: Set to `True` to draw bounding boxes.

### face_detection_bounding_box_color
- **Description**: The color of the bounding boxes.
- **Value Type**: `Tuple (R, G, B)`
- **Usage**: Set the color for the bounding boxes.

### face_detection_box_thickness
- **Description**: The thickness of the bounding boxes.
- **Value Type**: `Integer`
- **Usage**: Increase to make the bounding boxes thicker.

### face_detection_max_faces
- **Description**: The maximum number of faces to detect.
- **Value Type**: `Integer`
- **Usage**: Set a limit on the number of faces to detect.

---

[Back to Top](#)

---

<a id="primary_color"></a>

# Primary Color Filter

## Description
The **Primary Color** filter isolates specific colors in the image, using color clustering and filtering to highlight or remove colors.

## Properties

### primary_color_range
- **Description**: The range of colors to isolate or emphasize.
- **Value Type**: `String`
- **Usage**: Select the color range you want to focus on.

### primary_color_n_colors
- **Description**: The number of primary colors to detect and use in the image.
- **Value Type**: `Integer`
- **Usage**: Increase to detect more primary colors.

---

[Back to Top](#)

---

<a id="search_tags"></a>

# Search Tags Filter

## Description
The **Search Tags** filter uses YOLOv8 object detection to find specific objects within an image based on provided tags.

## Properties

### search_tags
- **Description**: A list of tags to search for within the image.
- **Value Type**: `List[String]`
- **Usage**: Provide the tags to search for in the image.

### show_annotations
- **Description**: Whether to display annotations for detected objects.
- **Value Type**: `Boolean`
- **Usage**: Set to `True` to show bounding boxes and labels for detected objects.

---

[Back to Top](#)

---

